rmse(actual, predicted)
rmse_ <- sqrt(mse(mlm2, na.omit(data)))
rmse_ <- sqrt(mse(mlm2, na.omit(data)))
rmse_
outliers_table <- data %>%
select(, everything()) %>%
filter(productivity %in% outliers_productivity |
oil_content %in% outliers_oil_content |
protein_content %in% outliers_protein_content |
vegetation_period %in% outliers_vegetation_period)
outliers_tabl.head(15)
outliers_table <- data %>%
select(, everything()) %>%
filter(productivity %in% outliers_productivity |
oil_content %in% outliers_oil_content |
protein_content %in% outliers_protein_content |
vegetation_period %in% outliers_vegetation_period)
outliers_table.head(15)
outliers_table <- data %>%
select(, everything()) %>%
filter(productivity %in% outliers_productivity |
oil_content %in% outliers_oil_content |
protein_content %in% outliers_protein_content |
vegetation_period %in% outliers_vegetation_period)
head(outliers_table, 15)
outliers_table <- data %>%
select(, everything()) %>%
filter(productivity %in% outliers_productivity |
oil_content %in% outliers_oil_content |
protein_content %in% outliers_protein_content |
vegetation_period %in% outliers_vegetation_period)
head(outliers_table, 5)
outliers_table <- data %>%
select(, everything()) %>%
filter(productivity %in% outliers_productivity |
oil_content %in% outliers_oil_content |
protein_content %in% outliers_protein_content |
vegetation_period %in% outliers_vegetation_period)
outliers_table
outliers_table <- data %>%
select(, everything()) %>%
filter(productivity %in% outliers_productivity |
oil_content %in% outliers_oil_content |
protein_content %in% outliers_protein_content |
vegetation_period %in% outliers_vegetation_period)
outliers_table %>% filter('id == 132')
outliers_table %>% filter(id == 132)
outliers_table <- data %>%
select(, everything()) %>%
filter(productivity %in% outliers_productivity |
oil_content %in% outliers_oil_content |
protein_content %in% outliers_protein_content |
vegetation_period %in% outliers_vegetation_period)
head(outliers_table, 5)
outliers_table <- data %>%
select(, everything()) %>%
filter(productivity %in% outliers_productivity |
oil_content %in% outliers_oil_content |
protein_content %in% outliers_protein_content |
vegetation_period %in% outliers_vegetation_period)
report(outliers_table, 5)
outliers_table <- data %>%
select(, everything()) %>%
filter(productivity %in% outliers_productivity |
oil_content %in% outliers_oil_content |
protein_content %in% outliers_protein_content |
vegetation_period %in% outliers_vegetation_period)
head(outliers_table, 5)
outliers_table %>% filter(id == 132) > report
outliers_table %>% filter(id == 132) > report()
outliers_table %>% filter(id == 132) > report(.)
outliers_table %>% filter(id == 132)
outliers_table %>% filter(id == 132)$productivity
outliers_table %>% filter(id == 132) %>% select(productivity)
outliers_table %>% filter(id == 132) %>% select(productivity, vegetation_period)
outliers_table %>% filter(id == 132) %>% select(id, productivity, vegetation_period)
outliers_table %>% select(id, productivity, vegetation_period)
outliers_table <- data %>%
select(, everything()) %>%
filter(productivity %in% outliers_productivity |
oil_content %in% outliers_oil_content |
protein_content %in% outliers_protein_content |
vegetation_period %in% outliers_vegetation_period) |
outliers_table <- data %>%
select(, everything()) %>%
filter(productivity %in% outliers_productivity |
oil_content %in% outliers_oil_content |
protein_content %in% outliers_protein_content |
vegetation_period %in% outliers_vegetation_period)
knitr::opts_chunk$set(echo = TRUE)
main_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(main_dir)
library(dplyr)
library(ggplot2)
library(knitr)
library(psych)
library(car)
library(agricolae)
library(lme4)
# Дополнительные библиотеки
#install.packages("devtools")
#devtools::install_github("ropensci/skimr")
library(skimr)
library(gridExtra) # позволяет объединять графики на один лист
#install.packages("remotes")
#remotes::install_github("easystats/report")
library(report) # позволяет сделать краткий отчет по ANOVA анализу
library(modelr) # осуществляет подсчет ошибок модели
library(performance)
data <- read.csv("soybean.csv")
knitr::opts_chunk$set(echo = TRUE)
main_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(main_dir)
library(dplyr)
library(ggplot2)
library(knitr)
library(psych)
library(car)
library(agricolae)
library(lme4)
# Дополнительные библиотеки
#install.packages("devtools")
#devtools::install_github("ropensci/skimr")
library(skimr)
library(gridExtra) # позволяет объединять графики на один лист
#install.packages("remotes")
#remotes::install_github("easystats/report")
library(report) # позволяет сделать краткий отчет по ANOVA анализу
library(modelr) # осуществляет подсчет ошибок модели
library(performance)
data <- read.csv("soybean.csv")
str(data)
skim(data)
#(sapply(data, function(x) sum(is.na(x))))
cat("origin:", sum(is.na(data$origin)), '\n')
cat("productivity:", sum(is.na(data$productivity)), '\n')
cat("vegetation_period:", sum(is.na(data$vegetation_period)), '\n')
cat("protein_content:", sum(is.na(data$protein_content)), '\n')
cat("oil_content:", sum(is.na(data$oil_content)), '\n')
sum(is.na(data))
(sum(rowSums(is.na(data)) > 0))
data$id <- as.factor(data$id)
data$leaf_shape <- as.factor(data$leaf_shape)
data$maturation_group <- as.factor(data$maturation_group)
data$lodging_type <- as.factor(data$lodging_type)
data$growth_type <- as.factor(data$growth_type)
data$flowering_group <- as.factor(data$flowering_group)
data$pubescence_colour <- as.factor(data$pubescence_colour)
data$corolla_colour <- as.factor(data$corolla_colour)
data$origin <- as.factor(data$origin) # под вопросом
data$site <- as.factor(data$site)
data$year <- as.factor(data$year)
skim(data)
# Подсчет выбросов
outliers_productivity <- boxplot.stats(data$productivity)$out
outliers_oil_content <- boxplot.stats(data$oil_content)$out
outliers_protein_content <- boxplot.stats(data$protein_content)$out
outliers_vegetation_period <- boxplot.stats(data$vegetation_period)$out
# Создание boxplot с выделением выбросов
boxplot(log(data$productivity), log(data$oil_content), log(data$protein_content), log(data$vegetation_period),
main="Outliers Detection (Log Scale)",
names=c("Productivity", "Oil Content", "Protein Content", "Vegetation Period"),
col=c("skyblue", "lightpink", "lightyellow", "lightgreen"),
outline=FALSE, log="y")
# Выделение выбросов
points(rep(1, length(outliers_productivity)), log(outliers_productivity), col="red", pch=19)
points(rep(2, length(outliers_oil_content)), log(outliers_oil_content), col="red", pch=19)
points(rep(3, length(outliers_protein_content)), log(outliers_protein_content), col="red", pch=19)
points(rep(4, length(outliers_vegetation_period)), log(outliers_vegetation_period), col="red", pch=19)
outliers_table <- data %>%
select(, everything()) %>%
filter(productivity %in% outliers_productivity |
oil_content %in% outliers_oil_content |
protein_content %in% outliers_protein_content |
vegetation_period %in% outliers_vegetation_period)
outliers_table %>% select(id, productivity, vegetation_period)
outliers_table %>% filter(id == 132) %>% select(id, productivity, vegetation_period)
data <- data %>% filter(!id %in% c('2', '9', '11', '16', '17', '27', '28', '30', '31', '32', '54', '69', '70', '114', '250'))
par(mfrow=c(2, 2))
hist(data$productivity, main="Productivity Histogram", xlab="Productivity (g/m^2)")
hist(data$oil_content, main="Oil Content Histogram", xlab="Oil Content (%)")
hist(data$protein_content, main="Protein Content Histogram", xlab="Protein Content (%)")
hist(data$vegetation_period, main="Vegetation Period Histogram", xlab="Vegetation Period (days)")
plot1_origin <- ggplot(data, aes(x = origin, y = productivity)) +
geom_bar(stat = "summary", fun = "mean", fill = "skyblue") +
labs(title = "Productivity by Origin", x = "Origin", y = "Productivity (g/m^2)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot2_origin <- ggplot(data, aes(x = origin, y = oil_content)) +
geom_bar(stat = "summary", fun = "mean", fill = "lightpink") +
labs(title = "Oil content by Origin", x = "Origin", y = "Oil Content (%)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot3_origin <- ggplot(data, aes(x = origin, y = protein_content)) +
geom_bar(stat = "summary", fun = "mean", fill = "yellow") +
labs(title = "Protein content by Origin", x = "Origin", y = "Protein Content (%)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot4_origin <- ggplot(data, aes(x = origin, y = vegetation_period)) +
geom_bar(stat = "summary", fun = "mean", fill = "lightgreen") +
labs(title = "Vegetation period by Origin", x = "Origin", y = "Vegetation Period (days)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
grid.arrange(plot1_origin, plot2_origin, plot3_origin, plot4_origin, ncol = 2)
plot1 <- ggplot(data, aes(x = year, y = productivity)) +
geom_bar(stat = "summary", fun = "mean", fill = "skyblue") +
labs(title = "Productivity by Year", x = "Year", y = "Productivity (g/m^2)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot2 <- ggplot(data, aes(x = year, y = oil_content)) +
geom_bar(stat = "summary", fun = "mean", fill = "lightpink") +
labs(title = "Oil content by Year", x = "Year", y = "Oil Content (%)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot3 <- ggplot(data, aes(x = year, y = protein_content)) +
geom_bar(stat = "summary", fun = "mean", fill = "yellow") +
labs(title = "Protein content by Year", x = "Year", y = "Protein Content (%)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot4 <- ggplot(data, aes(x = year, y = vegetation_period)) +
geom_bar(stat = "summary", fun = "mean", fill = "lightgreen") +
labs(title = "Vegetation period by Year", x = "Year", y = "Vegetation Period (days)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2)
p1 <- ggplot(data, aes(x = year, y = productivity, fill = leaf_shape)) +
geom_boxplot() +
labs(title = "Productivity by Year and Leaf Shape", x = "Year", y = "Productivity (g/m^2)")
p2 <- ggplot(data, aes(x = year, y = oil_content, fill = leaf_shape)) +
geom_boxplot() +
labs(title = "Oil Content by Year and Leaf Shape", x = "Year", y = "Oil Content (%)")
p3 <- ggplot(data, aes(x = year, y = protein_content, fill = leaf_shape)) +
geom_boxplot() +
labs(title = "Protein Content by Year and Leaf Shape", x = "Year", y = "Protein Content (%)")
p4 <- ggplot(data, aes(x = year, y = vegetation_period, fill = leaf_shape)) +
geom_boxplot() +
labs(title = "Vegetation Period by Year and Leaf Shape", x = "Year", y = "Vegetation Period (days)")
grid.arrange(p1, p2, p3, p4, ncol = 2)
p1 <- ggplot(data, aes(x = maturation_group, y = productivity)) +
geom_bar(stat = "summary", fun = "mean", fill = "skyblue") +
labs(title = "Productivity by Maturation Group", x = "Maturation Group", y = "Productivity (g/m^2)")
p2 <- ggplot(data, aes(x = maturation_group, y = oil_content)) +
geom_bar(stat = "summary", fun = "mean", fill = "lightpink") +
labs(title = "Oil content by Maturation Group", x = "Maturation Group", y = "Oil Content (%)")
p3 <- ggplot(data, aes(x = maturation_group, y = protein_content)) +
geom_bar(stat = "summary", fun = "mean", fill = "yellow") +
labs(title = "Protein content by Maturation Group", x = "Maturation Group", y = "Protein Content (%)")
p4 <- ggplot(data, aes(x = maturation_group, y = vegetation_period)) +
geom_bar(stat = "summary", fun = "mean", fill = "lightgreen") +
labs(title = "Vegetation period by Maturation Group", x = "Maturation Group", y = "Vegetation Period (days)")
grid.arrange(p1, p2, p3, p4, ncol = 2)
data_wt_na <- na.omit(data)
correlation_matrix <- cor(data_wt_na[,c("productivity", "oil_content", "protein_content", "vegetation_period")])
print(correlation_matrix)
pairs(data_wt_na[,c("productivity", "oil_content", "protein_content", "vegetation_period")])
aov_productivity_model <- aov(productivity ~ vegetation_period + oil_content + protein_content + maturation_group + flowering_group + lodging_type, data = data)
summary(aov_productivity_model)
aov_productivity_model <- aov(productivity ~ vegetation_period + oil_content + protein_content + maturation_group, data = data)
summary(aov_productivity_model)
par(mfrow=c(2,2))
plot(aov_productivity_model, which=1:4)
report(aov_productivity_model)
productivity_model <- lm(productivity ~ vegetation_period + oil_content + protein_content + maturation_group, data = data)
summary(productivity_model)
vif(productivity_model)
AIC(logLik(productivity_model))
productivity_model <- lm(productivity ~ vegetation_period + protein_content + maturation_group, data = data)
summary(productivity_model)
vif(productivity_model)
AIC(logLik(productivity_model))
aov_model2 <- aov(productivity ~ year*(id + maturation_group + site),  data = data)
summary(aov_model2)
report(aov_model2)
mlm2 <- lmer(productivity ~ year + (1|id/site/maturation_group), data)
summary(mlm2)
mse(mlm2, na.omit(data))
mape(mlm2, na.omit(data))
rsquare(mlm2, na.omit(data))
AIC(mlm2)
data$productivity <- predict(mlm2, data, allow.new.levels = TRUE)
qqnorm(residuals(mlm2))
qqline(residuals(mlm2))
plot(predict(mlm2), residuals(mlm2))
install.packages('IRkernel')
IRkernel::installspec()
pwd()
getwd()
R.version
install.packages('IRkernel')
IRkernel::installspec()
install.packages('ggplot2')
install.packages('tibble')
install.packages("languageserver")
install.packages("knit")
install.packages("knitr")
library(lintr)
install.packages("lintr")
install.packages("lintr")
install.packages("languageserver")
getwd()
ggtree(treeoflife) + geom_tiplab(size = 2) + layout_circular()
suppressWarnings(suppressMessages(BiocManager::install("ggtree")))
countData
file1 <- "./data/processed_data/reads/SRR941816_counts_corr.txt"
cond_1 = rep("cond1", 2)
cond_2 = rep("cond2", 2)
# Read the data from the standard input.
countData = read.table(file1, header=TRUE, sep="\t", row.names=1 )
# Build the dataframe from the conditions
samples = names(countData)
condition = factor(c(cond_1, cond_2))
colData = data.frame(samples=samples, condition=condition)
mat <- colData[,-1]
rownames(mat) <- colData[,1]
countData
samples = names(countData)
condition = factor(c(cond_1, cond_2))
colData = data.frame(samples=samples, condition=condition)
colData
file1 <- "./data/processed_data/reads/SRR94181X_counts_corr.txt"
cond_1 = rep("cond1", 2)
cond_2 = rep("cond2", 2)
# Read the data from the standard input.
countData = read.table(file1, header=TRUE, sep="\t", row.names=1 )
# Build the dataframe from the conditions
samples = names(countData)
condition = factor(c(cond_1, cond_2))
colData = data.frame(samples=samples, condition=condition)
mat <- colData[,-1]
rownames(mat) <- colData[,1]
file1 <- "./data/processed_data/reads/SRR94181X_counts_corr.txt"
cond_1 = rep("cond1", 2)
cond_2 = rep("cond2", 2)
# Read the data from the standard input.
countData = read.table(file1, header=TRUE, sep="\t", row.names=1 )
# Build the dataframe from the conditions
samples = names(countData)
condition = factor(c(cond_1, cond_2))
colData = data.frame(samples=samples, condition=condition)
colData
file1 <- "./data/processed_data/reads/SRR94181X_counts_corr.txt"
cond_1 = rep("cond1", 2)
cond_2 = rep("cond2", 2)
# Read the data from the standard input.
countData = read.table(file1, header=TRUE, sep="\t", row.names=1 )
# Build the dataframe from the conditions
samples = names(countData)
condition = factor(c(cond_1, cond_2))
colData = data.frame(samples=samples, condition=condition)
colData
file1 <- "./data/processed_data/reads/SRR94181X_counts_corr.txt"
cond_1 = rep("cond1", 2)
cond_2 = rep("cond2", 2)
# Read the data from the standard input.
countData = read.table(file1, header=TRUE, sep="\t", row.names=1 )
# Build the dataframe from the conditions
samples = names(countData)
condition = factor(c(cond_1, cond_2))
colData = data.frame(samples=samples, condition=condition)
colData
file <- "./data/processed_data/reads/SRR94181X_counts_corr.txt"
# cond_1 = rep("cond1", 2)
# cond_2 = rep("cond2", 2)
#
# # Read the data from the standard input.
# countData = read.table(file1, header=TRUE, sep="\t", row.names=1 )
#
# # Build the dataframe from the conditions
# samples = names(countData)
# condition = factor(c(cond_1, cond_2))
# colData = data.frame(samples=samples, condition=condition)
# colData
deseq2_workflow(file)
deseq2_workflow <- function(file){
# Set up the conditions based on the experimental setup.
cond_1 = rep("cond1", 2)
cond_2 = rep("cond2", 2)
# Read the data from the standard input.
countData = read.table(file, header=TRUE, sep="\t", row.names=1 )
# Build the dataframe from the conditions
samples = names(countData)
condition = factor(c(cond_1, cond_2))
colData = data.frame(samples=samples, condition=condition)
# Create DESEq2 dataset.
dds = DESeqDataSetFromMatrix(countData=countData, colData=colData, design = ~condition)
#Set the reference to be compared
dds$condition = relevel(dds$condition,"cond1")
# Run deseq
dds = DESeq(dds)
# Format the results.
res = results(dds)
# Sort the results data frame by the padj and foldChange columns.
sorted = res[with(res, order(padj, -log2FoldChange)), ]
# Turn it into a dataframe to have proper column names.
sorted.df = data.frame("id"=rownames(sorted),sorted)
# Write the table out.
write.table(sorted.df, file="result.txt", sep="\t", col.names=NA, quote=FALSE)
# Get normalized counts and write this to a file
nc = counts(dds,normalized=TRUE)
# Turn it into a dataframe to have proper column names.
dt = data.frame("id"=rownames(nc),nc)
# Save the normalize data matrix.
write.table(dt, file="norm-matrix-deseq2.txt", sep="\t",  row.name=FALSE, col.names=TRUE,quote=FALSE)
}
deseq2_workflow(file)
suppressWarnings(suppressMessages(BiocManager::install("DESeq2")))
suppressWarnings(suppressMessages(install.packages("dplyr")))
suppressWarnings(suppressMessages(library("DESeq2")))
suppressWarnings(suppressMessages(library("dplyr")))
deseq2_workflow(file)
file <- "./data/processed_data/reads/SRR94181X_counts_corr.txt"
deseq2_workflow(file)
file <- "./data/processed_data/reads/SRR94181X_counts_corr.txt"
deseq2_workflow(file)
BiocManager::install("DESeq2")
library("DESeq2")
library("dplyr")
library("gplots")
cond_1 = rep("DMSO", 3)
cond_2 = rep("AZK", 3)
# Read the data from the standard input.
countData = read.table("./workflow/4. Expression count/kallisto/count_martix.txt", header=TRUE, sep="\t", row.names=1)
setwd("F:\Documents\Bioinformatics Institute\Semester_project")
setwd("F:/Documents/Bioinformatics Institute/Semester_project")
cond_1 = rep("DMSO", 3)
cond_2 = rep("AZK", 3)
# Read the data from the standard input.
countData = read.table("./workflow/4. Expression count/kallisto/count_martix.txt", header=TRUE, sep="\t", row.names=1)
samples = names(countData)
condition = factor(c(cond_1, cond_2))
colData = data.frame(samples=samples, condition=condition)
dds = DESeqDataSetFromMatrix(countData=countData, colData=colData, design = ~condition)
dds
dds$samples
dds$countData
dds
# Read the data from the standard input.
countData = read.table("./workflow/4. Expression count/kallisto/count_martix.txt", header=TRUE, sep="\t", row.names=1)
# Build the dataframe from the conditions
samples = names(countData)
condition = factor(c(cond_1, cond_2))
colData = data.frame(samples=samples, condition=condition)
vec <- rownames(countData) == "NODE_27786_length_2344_cov_497.751412_g1855_i2"
# Create DESEq2 dataset.
dds = DESeqDataSetFromMatrix(countData=countData, colData=colData, design = ~condition)
#Set the reference to be compared
dds$condition = relevel(dds$condition,"DMSO")
# Control features for estimating size factors (normalize counts)
ctrlGenes <- rownames(dds) == "NODE_27786_length_2344_cov_497.751412_g1855_i2"
dds <- estimateSizeFactors(dds, controlGenes=ctrlGenes)
ctrlGenes
dds <- estimateSizeFactors(dds, controlGenes=ctrlGenes)
is.na(ctrlGene)
is.na(ctrlGenes)
all(is.na(ctrlGenes))
any(is.na(ctrlGenes))
dds <- estimateSizeFactors(dds, controlGenes=c("NODE_27786_length_2344_cov_497.751412_g1855_i2"))
dds <- estimateSizeFactors(dds, controlGenes=c(1)
)
which(rownames(countData) == "NODE_27786_length_2344_cov_497.751412_g1855_i2")
ctrlGenes <- which(rownames(countData) == "NODE_27786_length_2344_cov_497.751412_g1855_i2")
dds <- estimateSizeFactors(dds, controlGenes=ctrlGenes)
which(rownames(countData) == "NODE_27786_length_2344_cov_497.751412_g1855_i2")
# Control features for estimating size factors (normalize counts)
ctrlGenes <- c(which(rownames(countData) == "NODE_27786_length_2344_cov_497.751412_g1855_i2"))
c(which(rownames(countData) == "NODE_27786_length_2344_cov_497.751412_g1855_i2"))
ctrlGenes <- c(which(rownames(countData) == "NODE_27786_length_2344_cov_497.751412_g1855_i2"))
dds <- estimateSizeFactors(dds, controlGenes=ctrlGenes)
ctrlGenes <- c(which(rownames(dds) == "NODE_27786_length_2344_cov_497.751412_g1855_i2"))
dds <- estimateSizeFactors(dds, controlGenes=ctrlGenes)
dds <- estimateSizeFactors(dds, controlGenes=27786)
dds <- estimateSizeFactors(dds, controlGenes=c(27786))
dds <- estimateSizeFactors(dds, controlGenes=1:200)
dds <- estimateSizeFactors(dds, controlGenes=1)
dds <- estimateSizeFactors(dds, controlGenes=27786)
countData[[27786]]
countData[1]
countData[[1]]
countData[[27786]]
which(rownames(countData) == "NODE_27786_length_2344_cov_497.751412_g1855_i2")
countData["27786"]
countData[27786]
countData[27786,]
dds
dds[27786,]
dds <- estimateSizeFactors(dds, controlGenes=27786:27786)
c(which(rownames(dds) == "NODE_27786_length_2344_cov_497.751412_g1855_i2"))
dds <- estimateSizeFactors(dds, type="poscount", controlGenes=27786:27786)
dds <- estimateSizeFactors(dds, controlGenes=10000)
dds <- estimateSizeFactors(dds, controlGenes=20000)
dds
dds <- estimateSizeFactors(dds, type="poscount", controlGenes=123445)
vec <- rownames(countData) == 27786
# Create DESEq2 dataset.
dds = DESeqDataSetFromMatrix(countData=countData, colData=colData, design = ~condition)
#Set the reference to be compared
dds$condition = relevel(dds$condition,"DMSO")
# Control features for estimating size factors (normalize counts)
ctrlGenes <- c(which(rownames(dds) == "NODE_27786_length_2344_cov_497.751412_g1855_i2"))
dds <- estimateSizeFactors(dds, controlGenes=20000)
dds <- estimateSizeFactors(dds, controlGenes=10000)
dds = DESeq(dds)
dds <- estimateSizeFactors(dds, controlGenes=27786)
dds <- estimateSizeFactors(dds, controlGenes=20000)
dds <- estimateSizeFactors(dds, controlGenes=15000)
dds <- estimateSizeFactors(dds, controlGenes=16000)
vec <- rownames(countData) %in% "NODE_27786_length_2344_cov_497.751412_g1855_i2"
vec <- rownames(dds) %in% "NODE_27786_length_2344_cov_497.751412_g1855_i2"
vec <- rownames(dds) %in% "NODE_27786_length_2344_cov_497.751412_g1855_i2"
# Create DESEq2 dataset.
dds = DESeqDataSetFromMatrix(countData=countData, colData=colData, design = ~condition)
#Set the reference to be compared
dds$condition = relevel(dds$condition,"DMSO")
# Control features for estimating size factors (normalize counts)
ctrlGenes <- c(which(rownames(dds) == "NODE_27786_length_2344_cov_497.751412_g1855_i2"))
dds <- estimateSizeFactors(dds, controlGenes=vec)
vec
vec[[27786]]
dds <- estimateSizeFactors(dds, controlGenes=1)
dds <- estimateSizeFactors(dds, controlGenes=2)
